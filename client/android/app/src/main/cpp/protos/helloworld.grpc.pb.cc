// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: helloworld.proto

#include "helloworld.pb.h"
#include "helloworld.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace helloworld {

static const char* Greeter_method_names[] = {
  "/helloworld.Greeter/SayHello",
  "/helloworld.Greeter/Signup",
  "/helloworld.Greeter/Login",
  "/helloworld.Greeter/Logout",
  "/helloworld.Greeter/RefreshToken",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Signup_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(Greeter_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(Greeter_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefreshToken_(Greeter_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* Greeter::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* Greeter::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::Status Greeter::Stub::Signup(::grpc::ClientContext* context, const ::helloworld::LoginRequest& request, ::helloworld::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Signup_, context, request, response);
}

void Greeter::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::helloworld::LoginRequest* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::helloworld::LoginRequest* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::Signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Signup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::AsyncSignupRaw(::grpc::ClientContext* context, const ::helloworld::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Signup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::PrepareAsyncSignupRaw(::grpc::ClientContext* context, const ::helloworld::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Signup_, context, request, false);
}

::grpc::Status Greeter::Stub::Login(::grpc::ClientContext* context, const ::helloworld::LoginRequest& request, ::helloworld::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void Greeter::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::helloworld::LoginRequest* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::helloworld::LoginRequest* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::helloworld::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::helloworld::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status Greeter::Stub::Logout(::grpc::ClientContext* context, const ::helloworld::TokenInfo& request, ::helloworld::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void Greeter::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::helloworld::TokenInfo* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::helloworld::TokenInfo* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::helloworld::TokenInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::helloworld::TokenInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status Greeter::Stub::RefreshToken(::grpc::ClientContext* context, const ::helloworld::TokenInfo& request, ::helloworld::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RefreshToken_, context, request, response);
}

void Greeter::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::helloworld::TokenInfo* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::helloworld::TokenInfo* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::helloworld::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::helloworld::TokenInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_RefreshToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::helloworld::LoginResponse>* Greeter::Stub::PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::helloworld::TokenInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::helloworld::LoginResponse>::Create(channel_.get(), cq, rpcmethod_RefreshToken_, context, request, false);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::helloworld::HelloRequest, ::helloworld::HelloReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::helloworld::HelloRequest* req,
             ::helloworld::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::helloworld::LoginRequest, ::helloworld::LoginResponse>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::helloworld::LoginRequest* req,
             ::helloworld::LoginResponse* resp) {
               return service->Signup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::helloworld::LoginRequest, ::helloworld::LoginResponse>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::helloworld::LoginRequest* req,
             ::helloworld::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::helloworld::TokenInfo, ::helloworld::LoginResponse>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::helloworld::TokenInfo* req,
             ::helloworld::LoginResponse* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::helloworld::TokenInfo, ::helloworld::LoginResponse>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::helloworld::TokenInfo* req,
             ::helloworld::LoginResponse* resp) {
               return service->RefreshToken(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Signup(::grpc::ServerContext* context, const ::helloworld::LoginRequest* request, ::helloworld::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Login(::grpc::ServerContext* context, const ::helloworld::LoginRequest* request, ::helloworld::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Logout(::grpc::ServerContext* context, const ::helloworld::TokenInfo* request, ::helloworld::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::RefreshToken(::grpc::ServerContext* context, const ::helloworld::TokenInfo* request, ::helloworld::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace helloworld

