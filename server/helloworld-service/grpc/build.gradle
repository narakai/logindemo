// 参考这里查看如何定制protobuf gradle plugin：https://github.com/google/protobuf-gradle-plugin
// 参考这里查看如何在gradle项目中使用grpc-java：https://github.com/grpc/grpc-java/blob/master/examples/build.gradle

plugins {
    id 'java'
    id 'application'
    id "com.google.protobuf" version "0.8.8"
}

group 'com.tencent'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

def grpcVersion = '1.29.0'
def protobufVersion = '3.12.0'
def protocVersion = protobufVersion

// 控制从哪里读取proto文件，然后将proto和grpc文件生成到哪里
protobuf {
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir "../../../protos"
        }
        java {
            srcDirs 'src/main/grpc'
            srcDirs 'src/main/java'
        }
    }
}

dependencies {
    implementation "io.grpc:grpc-all:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "mysql:mysql-connector-java:8.0.19"

    //https://github.com/grpc/grpc-java/issues/5343
    implementation "javax.annotation:javax.annotation-api:1.3.2"
}

// 设置入口，执行./gradlew run就能启动server
application {
    mainClassName = "com.tencent.logindemo.HelloWorldServer"
}
